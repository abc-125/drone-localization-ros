#!/usr/bin/env python3

import sys
import threading
import time
import cv2 as cv
import numpy as np
import rospy

from cv_bridge import CvBridge
from image_geometry import PinholeCameraModel

from mmdet.apis import init_detector, inference_detector, show_result_pyplot

from drone_localization_ros.msg import Detection, Detections, PosesWithCovariance
from sensor_msgs.msg import Image, CameraInfo
from localization import get_poses_msg



class DroneLocalizationNode(object):
    def __init__(self):
        rospy.logwarn("Initializing")

        self.mode = self.load_param('~network_mode')  # rgb / thermal / dual
        self.current_mode = None
        if self.mode == "dual":
            self.current_mode = "rgb"
            self.no_detections_treshold = self.load_param('~no_detections_treshold')

        self._bridge = CvBridge()
        self._last_msg_t = None
        self._last_msg_rgb = None
        self._msg_lock = threading.Lock()
        self._image_counter = 0

        self.camera = PinholeCameraModel()
        self._camera_info = None
        self._drone_width = self.load_param('~drone_width')
        self._covariance_xy = 0.05
        self._covariance_z = 0.5

        self.original_input_size = None
        self.input_size = (640, 512)
        
        # load network parameters, create models
        device = 'cuda:0'
        if self.mode == "rgb" or self.mode == "dual":
            config_file = self.load_param('~config_rgb')
            checkpoint_file = self.load_param('~model_rgb')
            self.model_rgb = init_detector(config_file, checkpoint_file, device=device)
        if self.mode == "thermal" or self.mode == "dual":
            config_file = self.load_param('~config_thermal')
            checkpoint_file = self.load_param('~model_thermal')
            self.model_thermal = init_detector(config_file, checkpoint_file, device=device)

        self._visualization = self.load_param('~visualization', True)

        # init publishers and subsribers
        self._detections_pub = rospy.Publisher('~detections', Detections, queue_size=1)
        self._poses_pub = rospy.Publisher('~poses', PosesWithCovariance, queue_size=1)
        self._vis_pub = rospy.Publisher('~visualization', Image, queue_size=1)
        self._sub_rgb = rospy.Subscriber(self.load_param('~input_rgb'), Image, self.callback_image_rgb, 
                                        queue_size=1)
        self._sub_t = rospy.Subscriber(self.load_param('~input_t'), Image, self.callback_image_t, 
                                        queue_size=1)
        self._sub_cam_info = rospy.Subscriber(self.load_param('~camera_info'), CameraInfo, 
                                                self.callback_cam_info, queue_size=1)

        self.start_time = time.time()
        rospy.logwarn("Initialized")


    def run(self):
        rate = rospy.Rate(100)
        detections_counter = 0

        while not rospy.is_shutdown():
            if self._msg_lock.acquire(False):
                img_msg_rgb = self._last_msg_rgb
                img_msg_t = self._last_msg_t
                self._last_msg_rgb = None
                self._last_msg_t = None
                self._msg_lock.release()
            else:
                rate.sleep()
                continue

            if self.mode == "rgb":
                img_msg = img_msg_rgb
            elif self.mode == "thermal":
                img_msg = img_msg_t
            else:
                if self.current_mode == "rgb":
                    img_msg = img_msg_rgb
                else:
                    img_msg = img_msg_t

            if img_msg and self._camera_info:
                # convert and resize input image
                np_image = self.convert_to_cv_image(img_msg)
                np_image = cv.resize(np_image, self.input_size)
                
                # rgb or thermal mode (one neural network)
                if self.mode == "rgb":
                    outputs = inference_detector(self.model_rgb, np_image)
                elif self.mode == "thermal":
                    outputs = inference_detector(self.model_thermal, np_image)

                # dual mode (two neural networks)
                else:
                    if detections_counter < self.no_detections_treshold:
                        if self.current_mode == "rgb":
                            outputs = inference_detector(self.model_rgb, np_image)
                        else:
                            outputs = inference_detector(self.model_thermal, np_image)
                    else:
                        if self.current_mode == "rgb":
                            self.current_mode = "thermal"
                            img_msg = img_msg_t
                            np_image = self.convert_to_cv_image(img_msg)
                            np_image = cv.resize(np_image, self.input_size)
                            outputs = inference_detector(self.model_thermal, np_image)
                        else:
                            self.current_mode = "rgb"
                            img_msg = img_msg_rgb
                            np_image = self.convert_to_cv_image(img_msg)
                            np_image = cv.resize(np_image, self.input_size)
                            outputs = inference_detector(self.model_rgb, np_image)

                        detections_counter = 0
                        rospy.loginfo("[DroneLocalization]: Cannot detect target, \
                                        changing to {} neural network".format(self.current_mode))                 

                    if not outputs:
                        detections_counter += 1
                    else:
                        detections_counter = 0

                # publish detections
                dets_msg = self.get_detections_msg(outputs)
                self._detections_pub.publish(dets_msg)
                #rospy.loginfo(dets_msg)

                # calculate relative localizations
                poses_msg = get_poses_msg(self, dets_msg)
                self._poses_pub.publish(poses_msg)
                   
                # visualize results
                if self._visualization:
                    if self.mode == "rgb" or self.mode == "dual":
                        img = show_result_pyplot(self.model_rgb, np_image, outputs)
                    else:
                        img = show_result_pyplot(self.model_thermal, np_image, outputs)
                    image_msg = self._bridge.cv2_to_imgmsg(img) # , 'bgr8'
                    self._vis_pub.publish(image_msg)

                # count processing time
                self._image_counter = self._image_counter + 1
                if (self._image_counter % 11) == 10:
                    rospy.loginfo("Images detected per second=%.2f",
                                  float(self._image_counter) / (time.time() - self.start_time))

            rate.sleep()


    def get_detections_msg(self, outputs):
        if not outputs:
            return None

        dets_msg = Detections()
        dets_msg.header = self._header

        for x1, y1, x2, y2, conf in outputs[0]:
            det_msg = Detection()

            det_msg.class_id = 1
            det_msg.label = "Drone"
            det_msg.confidence = conf

            det_msg.xmin = np.uint32(x1)
            det_msg.ymin = np.uint32(y1)
            det_msg.xmax = np.uint32(x2)
            det_msg.ymax = np.uint32(y2)

            dets_msg.detections.append(det_msg)

        return dets_msg


    def convert_to_cv_image(self, image_msg):
        if image_msg is None:
            return None

        cv_img = self._bridge.imgmsg_to_cv2(image_msg)

        if image_msg.encoding.lower() == 'mono8':
            cv_img = cv.cvtColor(cv_img, cv.COLOR_GRAY2BGR)
            cv_img = cv.normalize(cv_img, None, 0, 255, cv.NORM_MINMAX, cv.CV_8U)  # normalizing for thermal images

        return cv_img


    def callback_image_rgb(self, msg):
        rospy.logdebug("Got an rgb image")
        if not self.original_input_size:
            self.original_input_size = (msg.width, msg.height)
        if self.mode == "rgb":
            if self._msg_lock.acquire(False):
                self._last_msg_rgb = msg
                self._header = msg.header
                self._msg_lock.release()
    

    def callback_image_t(self, msg):
        rospy.logdebug("Got a thermal image")
        if self.mode == "thermal":
            if self._msg_lock.acquire(False):
                self._last_msg_t = msg
                self._header = msg.header
                self._msg_lock.release()


    def callback_cam_info(self, msg):
        #     [fx'  0  cx' Tx]
        # P = [ 0  fy' cy' Ty]
        #     [ 0   0   1   0]
        rospy.logdebug("Got camera info")
        if not self._camera_info and self.original_input_size:
            self._camera_info = msg

            fx = self._camera_info.P[0] / self.original_input_size[0] * self.input_size[0]
            fy = self._camera_info.P[5] / self.original_input_size[1] * self.input_size[1]
            cx = self.input_size[0] / 2
            cy = self.input_size[1] / 2
            self._camera_info.P = list(self._camera_info.P)
            self._camera_info.P[0] = fx
            self._camera_info.P[5] = fy
            self._camera_info.P[2] = cx
            self._camera_info.P[6] = cy
            self._camera_info.P = tuple(self._camera_info.P)

            self.camera.fromCameraInfo(self._camera_info)


    @staticmethod
    def load_param(param, default=None):
        new_param = rospy.get_param(param, default)
        rospy.loginfo("[DroneLocalization] %s: %s", param, new_param)
        return new_param


def main(argv):
    rospy.init_node('drone_localization_ros')
    node = DroneLocalizationNode()
    node.run()


if __name__ == '__main__':
    main(sys.argv)
